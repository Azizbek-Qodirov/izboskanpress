from loader import dp, bot
from keyboards.inline.contactAdminKey import contactAdmin
from aiogram import types
from aiogram.dispatcher import FSMContext
from states.contactState import contact
from states.replyState import replyToUser
from keyboards.default.phoneShare import shareNumber
from keyboards.default.cancelContact import cancelContactKey
from keyboards.default.menuKeys import menuKeyboard
from data.config import ADMINS


mergedkeys = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
btn1 =  types.KeyboardButton(text="‚ùå –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à")
btn2 =  types.KeyboardButton(text="üìû –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–∏ —é–±–æ—Ä–∏—à:", request_contact=True)
mergedkeys.add(btn2, btn1)

@dp.message_handler(text="‚ùå –ë–µ–∫–æ—Ä “õ–∏–ª–∏—à", state=contact)
async def cancelHandler(message: types.Message, state: FSMContext):
  await state.finish()
  await message.reply("–ú—É—Ä–æ–∂–∞–∞—Ç —é–±–æ—Ä–∏—à –±–µ–∫–æ—Ä “õ–∏–ª–∏–Ω–¥–∏", reply_markup=menuKeyboard)

@dp.callback_query_handler(lambda query: query.data=="$contactAdmin")
async def handleContactInfo(query: types.CallbackQuery, state: FSMContext):
  await query.message.delete()
  await query.message.answer("–é–∑–∏–Ω–≥–∏–∑–Ω–∏ —Ç–∞–Ω–∏—à—Ç–∏—Ä–∏–Ω–≥. \n–ò—Å–º —Ñ–∞–º–∏–ª—è–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=cancelContactKey)
  await contact.fullName.set()

@dp.message_handler(state=contact.fullName)
async def fullNameHandle(message: types.Message, state: FSMContext):
  checkName =  message.text.split()
  replacedName = message.text.replace(" ", '')

  if len(checkName) == 2 and replacedName.isalpha():
    await state.update_data({"name": message.text})
    await contact.next()
    await message.reply("–ú–∞–Ω–∑–∏–ª–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=cancelContactKey)
  else:
    await message.reply("–ò–ª—Ç–∏–º–æ—Å –∏—Å–º –≤–∞ —Ñ–∞–º–∏–ª—è–Ω–≥–∏–∑–Ω–∏ —Ç—û“ì—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=cancelContactKey)

@dp.message_handler(state=contact.location)
async def locationHandler(message: types.Message, state: FSMContext):
  await state.update_data({"location": message.text})
  await contact.next()
  await message.reply("“ö—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞ –æ—Ä“õ–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=mergedkeys)

@dp.message_handler(content_types=types.ContentTypes.CONTACT ,state=contact.phoneNumber)
async def phoneHandler(message: types.Message, state: FSMContext):
  await state.update_data({"phone": message.contact.phone_number})
  await state.update_data({"id": message.contact.user_id})
  await contact.next()
  await message.reply("–ú—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑–Ω–∏ –π—û–ª–ª–∞–Ω–≥:", reply_markup=cancelContactKey)

@dp.message_handler(content_types=types.ContentTypes.TEXT, state=contact.phoneNumber)
async def phoneHandler(message: types.Message, state: FSMContext):
  await message.reply("“ö—É–π–∏–¥–∞–≥–∏ —Ç—É–≥–º–∞ –æ—Ä“õ–∞–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:", reply_markup=mergedkeys)

@dp.message_handler(state=contact.message)
async def messageHandler(message: types.Message, state: FSMContext):
  await state.update_data({"message": message.text})
  await message.reply("‚úÖ –ú—É—Ä–æ–∂–∞–∞—Ç–∏–Ω–≥–∏–∑ –∞–¥–º–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä–≥–∞ —é–±–æ—Ä–∏–ª–¥–∏!", reply_markup=menuKeyboard)
  data = await state.get_data()
  print(data)

  name = data.get('name')
  location = data.get('location')
  phone = data.get('phone')
  message = data.get('message')
  user_id = data.get('id')
  answerKey = types.InlineKeyboardMarkup()
  key1 = types.InlineKeyboardButton(text="–•–∞–±–∞—Ä —é–±–æ—Ä–∏—à", callback_data=f"#{user_id}")
  answerKey.add(key1)

  template = f"#–Ø–Ω–≥–∏ –º—É—Ä–æ–∂–∞–∞—Ç \n\n–ò—Å–º–∏: {name} \n–ú–∞–Ω–∑–∏–ª–∏: {location} \n–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏: {phone} \n–•–∞–±–∞—Ä: {message}"
  await state.finish()
  for admin in ADMINS:
    await bot.send_message(chat_id=admin, text=template, reply_markup=answerKey)